

#include "speedDecider.hpp"
#include "robot.hpp"

int main(){

	if (initClientRobot() !=0){

		std::cout<<" Error initializing robot"<<std::endl;

	}
	const double v_go = 40.0;
	

	
	const double kp = 0.04; //how far the error is from the error line, the constant turning SCALE 

	

   
   const int CameraWidth = 150;

    double vLeft = 40.0;

    double vRight = 40.0;

    

   // SavePPMFile("i0.ppm",cameraView);

    while(1){ 
		
		takePicture();
		
		double Line_position = 0;                  // While true is going in a loop analyzing the frames

		int white = 0; 

		int CameraWidth = 150;    

		int Middlerow = 50;                        // 150 is the width of the Camera View

		                                               // Stores the amount of white pixels stored

		for (int i = 0; i < 150; i++){                           

			int brightness = get_pixel(cameraView, 50, i, 3);       // Brightness of the pixels

			//std::cout<<brightness<<" ";

			

			if(brightness==255){                             // Detects pixels with a brightness of 255            

				white++;                                            

				Line_position += i - CameraWidth/2;

				} 

		 } 
		 //Line_position /= white;                         // Divides the Line Position by the white  

        std::cout<<std::endl<<Line_position<<std::endl;    // Prints the average
        
        double dv = kp * Line_position;
        vLeft = v_go + dv;
        vRight = v_go - dv;

        

	

      setMotors(vLeft,vRight);   

      std::cout<<" vLeft="<<vLeft<<"  vRight="<<vRight<<std::endl;

       usleep(10000);

  } //while

  



} // main
